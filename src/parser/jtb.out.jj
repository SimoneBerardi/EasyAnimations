/* Generated by JTB 1.4.7 */


options
{
  JDK_VERSION = "1.5";
  static = true;
  // JTB_P = "parser";
}

PARSER_BEGIN(EasyAnimParser)
package parser;

import parser.visitor.*;
import java.io.FileInputStream;
import parser.syntaxtree.*;


public class EasyAnimParser {

  public static void main(String args[]) {
    System.out.println("Reading Animation...");
    try {
      FileInputStream fin = new FileInputStream(".\\src\\animation.txt");
      EasyAnimParser parser = new EasyAnimParser(fin);
      Animation animation = EasyAnimParser.Animation();
      DepthFirstVoidVisitor v = new MyVisitor();
      animation.accept(v);
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(EasyAnimParser)

Animation Animation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  AnimationName n2 = null;
  AnimationDef n3 = null;
}
{
  n1 = "Animation"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = AnimationName()
  n3 = AnimationDef()
  { return new Animation(n0, n2, n3); }
}

AnimationDef AnimationDef() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Duration n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeList n9 = null;
  SubAnimation n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeList n17 = new NodeList();
  Pose n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeChoice n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
}
{
  n1 = "Duration:"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Duration()
  (
    { n9 = new NodeList(); }
    { n4 = new NodeSequence(4); }
    n6 = "SubAnimations"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
    n8 = < LPAR >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n4.addNode(n7); }
    (
      n10 = SubAnimation()
      { n9.addNode(n10); }
    )+
    { n9.nodes.trimToSize(); }
    { n4.addNode(n9); }
    n12 = < RPAR >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n4.addNode(n11); }
    { n3.addNode(n4); }
  )?
  n14 = "Poses"
  { n13 = JTBToolkit.makeNodeToken(n14); }
  n16 = < LPAR >
  { n15 = JTBToolkit.makeNodeToken(n16); }
  (
    n18 = Pose()
    { n17.addNode(n18); }
  )+
  { n17.nodes.trimToSize(); }
  n20 = < RPAR >
  { n19 = JTBToolkit.makeNodeToken(n20); }
  (
    (
      n23 = ";"
      { n22 = JTBToolkit.makeNodeToken(n23); }
      { n21 = new NodeChoice(n22, 0, 2); }
    |
      n25 = < EOF >
      {
        n25.beginColumn++;
        n25.endColumn++;
        { n24 = JTBToolkit.makeNodeToken(n25); }
      }
      { n21 = new NodeChoice(n24, 1, 2); }
    )
    
  )
  { return new AnimationDef(n0, n2, n3, n13, n15, n17, n19, n21); }
}

SubAnimation SubAnimation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  AnimationName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Frame n9 = null;
  AnimationDef n10 = null;
}
{
  n1 = "Add"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "Animation"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = AnimationName()
  n6 = "at"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = "frame"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = Frame()
  n10 = AnimationDef()
  { return new SubAnimation(n0, n2, n4, n5, n7, n9, n10); }
}

Pose Pose() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PoseName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Frame n9 = null;
  PoseDef n10 = null;
}
{
  n1 = "Add"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "Pose"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = PoseName()
  n6 = "at"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = "frame"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = Frame()
  n10 = PoseDef()
  { return new Pose(n0, n2, n4, n5, n7, n9, n10); }
}

PoseDef PoseDef() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeList n2 = new NodeList();
  NodeSequence n3 = null;
  BoneName n4 = null;
  BoneDef n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < LPAR >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    { n3 = new NodeSequence(2); }
    n4 = BoneName()
    { n3.addNode(n4); }
    n5 = BoneDef()
    { n3.addNode(n5); }
    { n2.addNode(n3); }
  )+
  { n2.nodes.trimToSize(); }
  n7 = < RPAR >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new PoseDef(n0, n2, n6); }
}

BoneName BoneName() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
}
{
  (
    (
      n2 = "HEAD:"
      { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0, 14); }
    |
      n4 = "CHEST:"
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1, 14); }
    |
      n6 = "R SHOULDER:"
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2, 14); }
    |
      n8 = "L SHOULDER:"
      { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3, 14); }
    |
      n10 = "UPPER R ARM:"
      { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4, 14); }
    |
      n12 = "LOWER R ARM:"
      { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5, 14); }
    |
      n14 = "UPPER L ARM:"
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6, 14); }
    |
      n16 = "LOWER L ARM:"
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7, 14); }
    |
      n18 = "R HIP:"
      { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8, 14); }
    |
      n20 = "L HIP:"
      { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9, 14); }
    |
      n22 = "UPPER R LEG:"
      { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10, 14); }
    |
      n24 = "LOWER R LEG:"
      { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11, 14); }
    |
      n26 = "UPPER L LEG:"
      { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12, 14); }
    |
      n28 = "LOWER L LEG:"
      { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13, 14); }
    )
    
  )
  { return new BoneName(n0); }
}

BoneDef BoneDef() :
{
  // --- JTB generated node declarations ---
  Position n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Position n3 = null;
}
{
  n0 = Position()
  n2 = ","
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Position()
  { return new BoneDef(n0, n1, n3); }
}

Frame Frame() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < NUM >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Frame(n0); }
}

Position Position() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < FLOAT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = ","
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < FLOAT >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = ","
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = < FLOAT >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n13 = ")"
  { n12 = JTBToolkit.makeNodeToken(n13); }
  { return new Position(n0, n2, n4, n6, n8, n10, n12); }
}

AnimationName AnimationName() :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeToken n1 = null;
  Token n2 = null;
}
{
  (
    n2 = < STRING >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  { return new AnimationName(n0); }
}

PoseName PoseName() :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeToken n1 = null;
  Token n2 = null;
}
{
  (
    n2 = < STRING >
    { n1 = JTBToolkit.makeNodeToken(n2); }
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  { return new PoseName(n0); }
}

Duration Duration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  n1 = < NUM >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "frames"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new Duration(n0, n2); }
}

TOKEN :
{
  < NUM : "0"| ["1"-"9"] ( ["0"-"9"] )* >
| < FLOAT : ["0"-"9"] ( ["0"-"9"] )* ( "." ["0"-"9"] ( ["0"-"9"] )* )? >
}

TOKEN :
{
  < LPAR : "{" >
| < RPAR : "}" >
| < STRING : ( ["a"-"z", "A"-"Z", "\'", "_", ".", "!", "?", "(", ")", "0"-"9", "\u00e0", "\u00f2", "\u00f9", "\u00e8", "\u00e9", "\u00ec"] )+ >
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}
