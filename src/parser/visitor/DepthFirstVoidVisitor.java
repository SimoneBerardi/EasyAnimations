/* Generated by JTB 1.4.7 */
package parser.visitor;

import parser.syntaxtree.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
      return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeTCF n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Animation n) {
    // f0 -> "Animation"
    n.f0.accept(this);
    // f1 -> AnimationName()
    n.f1.accept(this);
    // f2 -> AnimationDef()
    n.f2.accept(this);
  }

  public void visit(final AnimationDef n) {
    // f0 -> "Duration:"
    n.f0.accept(this);
    // f1 -> Duration()
    n.f1.accept(this);
    // f2 -> ( #0 "SubAnimations" #1 <LPAR>
    // .. .. . #2 ( SubAnimation() )+
    // .. .. . #3 <RPAR> )?
    n.f2.accept(this);
    // f3 -> "Poses"
    n.f3.accept(this);
    // f4 -> <LPAR>
    n.f4.accept(this);
    // f5 -> ( Pose() )+
    n.f5.accept(this);
    // f6 -> <RPAR>
    n.f6.accept(this);
    // f7 -> ( %0 ";"
    // .. .. | %1 <EOF> )
    n.f7.accept(this);
  }

  public void visit(final SubAnimation n) {
    // f0 -> "Add"
    n.f0.accept(this);
    // f1 -> "Animation"
    n.f1.accept(this);
    // f2 -> AnimationName()
    n.f2.accept(this);
    // f3 -> "at"
    n.f3.accept(this);
    // f4 -> "frame"
    n.f4.accept(this);
    // f5 -> Frame()
    n.f5.accept(this);
    // f6 -> AnimationDef()
    n.f6.accept(this);
  }

  public void visit(final Pose n) {
    // f0 -> "Add"
    n.f0.accept(this);
    // f1 -> "Pose"
    n.f1.accept(this);
    // f2 -> PoseName()
    n.f2.accept(this);
    // f3 -> "at"
    n.f3.accept(this);
    // f4 -> "frame"
    n.f4.accept(this);
    // f5 -> Frame()
    n.f5.accept(this);
    // f6 -> PoseDef()
    n.f6.accept(this);
  }

  public void visit(final PoseDef n) {
    // f0 -> <LPAR>
    n.f0.accept(this);
    // f1 -> ( #0 BoneName() #1 BoneDef() )+
    n.f1.accept(this);
    // f2 -> <RPAR>
    n.f2.accept(this);
  }

  public void visit(final BoneName n) {
    // f0 -> ( %00 "HEAD:"
    // .. .. | %01 "CHEST:"
    // .. .. | %02 "R SHOULDER:"
    // .. .. | %03 "L SHOULDER:"
    // .. .. | %04 "UPPER R ARM:"
    // .. .. | %05 "LOWER R ARM:"
    // .. .. | %06 "UPPER L ARM:"
    // .. .. | %07 "LOWER L ARM:"
    // .. .. | %08 "R HIP:"
    // .. .. | %09 "L HIP:"
    // .. .. | %10 "UPPER R LEG:"
    // .. .. | %11 "LOWER R LEG:"
    // .. .. | %12 "UPPER L LEG:"
    // .. .. | %13 "LOWER L LEG:" )
    n.f0.accept(this);
  }

  public void visit(final BoneDef n) {
    // f0 -> Position()
    n.f0.accept(this);
    // f1 -> ","
    n.f1.accept(this);
    // f2 -> Position()
    n.f2.accept(this);
  }

  public void visit(final Frame n) {
    // f0 -> <NUM>
    n.f0.accept(this);
  }

  public void visit(final Position n) {
    // f0 -> "("
    n.f0.accept(this);
    // f1 -> <FLOAT>
    n.f1.accept(this);
    // f2 -> ","
    n.f2.accept(this);
    // f3 -> <FLOAT>
    n.f3.accept(this);
    // f4 -> ","
    n.f4.accept(this);
    // f5 -> <FLOAT>
    n.f5.accept(this);
    // f6 -> ")"
    n.f6.accept(this);
  }

  public void visit(final AnimationName n) {
    // f0 -> ( <STRING> )+
    n.f0.accept(this);
  }

  public void visit(final PoseName n) {
    // f0 -> ( <STRING> )+
    n.f0.accept(this);
  }

  public void visit(final Duration n) {
    // f0 -> <NUM>
    n.f0.accept(this);
    // f1 -> "frames"
    n.f1.accept(this);
  }

}
