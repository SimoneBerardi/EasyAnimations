/* Generated By:JavaCC: Do not edit this line. EasyAnimParser.java */
package parser;

import parser.visitor.*;
import java.io.FileInputStream;
import parser.syntaxtree.*;


public class EasyAnimParser implements EasyAnimParserConstants {

  public static void main(String args[]) {
    System.out.println("Reading Animation...");
    try {
      FileInputStream fin = new FileInputStream(".\u005c\u005csrc\u005c\u005canimation.txt");
      EasyAnimParser parser = new EasyAnimParser(fin);
      Animation animation = EasyAnimParser.Animation();
      DepthFirstVoidVisitor v = new MyVisitor();
      animation.accept(v);
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  static final public Animation Animation() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  AnimationName n2 = null;
  AnimationDef n3 = null;
    n1 = jj_consume_token(1);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = AnimationName();
    n3 = AnimationDef();
    {if (true) return new Animation(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  static final public AnimationDef AnimationDef() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Duration n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeList n9 = null;
  SubAnimation n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeList n17 = new NodeList();
  Pose n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeChoice n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
    n1 = jj_consume_token(2);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Duration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      n9 = new NodeList();
      n4 = new NodeSequence(4);
      n6 = jj_consume_token(3);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n8 = jj_consume_token(LPAR);
      n7 = JTBToolkit.makeNodeToken(n8);
      n4.addNode(n7);
      label_1:
      while (true) {
        n10 = SubAnimation();
        n9.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 6:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      n9.nodes.trimToSize();
      n4.addNode(n9);
      n12 = jj_consume_token(RPAR);
      n11 = JTBToolkit.makeNodeToken(n12);
      n4.addNode(n11);
      n3.addNode(n4);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n14 = jj_consume_token(4);
    n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(LPAR);
    n15 = JTBToolkit.makeNodeToken(n16);
    label_2:
    while (true) {
      n18 = Pose();
      n17.addNode(n18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    n17.nodes.trimToSize();
    n20 = jj_consume_token(RPAR);
    n19 = JTBToolkit.makeNodeToken(n20);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      n23 = jj_consume_token(5);
        n22 = JTBToolkit.makeNodeToken(n23);
        n21 = new NodeChoice(n22, 0, 2);
      break;
    case 0:
      n25 = jj_consume_token(0);
        n25.beginColumn++;
        n25.endColumn++;
        { n24 = JTBToolkit.makeNodeToken(n25); }
        n21 = new NodeChoice(n24, 1, 2);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new AnimationDef(n0, n2, n3, n13, n15, n17, n19, n21);}
    throw new Error("Missing return statement in function");
  }

  static final public SubAnimation SubAnimation() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  AnimationName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Frame n9 = null;
  AnimationDef n10 = null;
    n1 = jj_consume_token(6);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(1);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = AnimationName();
    n6 = jj_consume_token(7);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(8);
    n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Frame();
    n10 = AnimationDef();
    {if (true) return new SubAnimation(n0, n2, n4, n5, n7, n9, n10);}
    throw new Error("Missing return statement in function");
  }

  static final public Pose Pose() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PoseName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Frame n9 = null;
  PoseDef n10 = null;
    n1 = jj_consume_token(6);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(9);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = PoseName();
    n6 = jj_consume_token(7);
    n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(8);
    n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Frame();
    n10 = PoseDef();
    {if (true) return new Pose(n0, n2, n4, n5, n7, n9, n10);}
    throw new Error("Missing return statement in function");
  }

  static final public PoseDef PoseDef() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeList n2 = new NodeList();
  NodeSequence n3 = null;
  BoneName n4 = null;
  BoneDef n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(LPAR);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_3:
    while (true) {
      n3 = new NodeSequence(2);
      n4 = BoneName();
      n3.addNode(n4);
      n5 = BoneDef();
      n3.addNode(n5);
      n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    n2.nodes.trimToSize();
    n7 = jj_consume_token(RPAR);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new PoseDef(n0, n2, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public BoneName BoneName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeToken n25 = null;
  Token n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      n2 = jj_consume_token(10);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 14);
      break;
    case 11:
      n4 = jj_consume_token(11);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 14);
      break;
    case 12:
      n6 = jj_consume_token(12);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 14);
      break;
    case 13:
      n8 = jj_consume_token(13);
        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3, 14);
      break;
    case 14:
      n10 = jj_consume_token(14);
        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4, 14);
      break;
    case 15:
      n12 = jj_consume_token(15);
        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5, 14);
      break;
    case 16:
      n14 = jj_consume_token(16);
        n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6, 14);
      break;
    case 17:
      n16 = jj_consume_token(17);
        n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7, 14);
      break;
    case 18:
      n18 = jj_consume_token(18);
        n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8, 14);
      break;
    case 19:
      n20 = jj_consume_token(19);
        n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9, 14);
      break;
    case 20:
      n22 = jj_consume_token(20);
        n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10, 14);
      break;
    case 21:
      n24 = jj_consume_token(21);
        n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11, 14);
      break;
    case 22:
      n26 = jj_consume_token(22);
        n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12, 14);
      break;
    case 23:
      n28 = jj_consume_token(23);
        n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13, 14);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new BoneName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BoneDef BoneDef() throws ParseException {
  // --- JTB generated node declarations ---
  Position n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Position n3 = null;
    n0 = Position();
    n2 = jj_consume_token(24);
    n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Position();
    {if (true) return new BoneDef(n0, n1, n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Frame Frame() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(NUM);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new Frame(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Position Position() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
    n1 = jj_consume_token(25);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FLOAT);
    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(24);
    n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(FLOAT);
    n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(24);
    n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(FLOAT);
    n10 = JTBToolkit.makeNodeToken(n11);
    n13 = jj_consume_token(26);
    n12 = JTBToolkit.makeNodeToken(n13);
    {if (true) return new Position(n0, n2, n4, n6, n8, n10, n12);}
    throw new Error("Missing return statement in function");
  }

  static final public AnimationName AnimationName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeToken n1 = null;
  Token n2 = null;
    label_4:
    while (true) {
      n2 = jj_consume_token(STRING);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new AnimationName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public PoseName PoseName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeToken n1 = null;
  Token n2 = null;
    label_5:
    while (true) {
      n2 = jj_consume_token(STRING);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new PoseName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Duration Duration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    n1 = jj_consume_token(NUM);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(27);
    n2 = JTBToolkit.makeNodeToken(n3);
    {if (true) return new Duration(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EasyAnimParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x8,0x40,0x21,0xfffc00,0xfffc00,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,};
   }

  /** Constructor with InputStream. */
  public EasyAnimParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EasyAnimParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EasyAnimParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EasyAnimParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EasyAnimParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EasyAnimParser(EasyAnimParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EasyAnimParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
