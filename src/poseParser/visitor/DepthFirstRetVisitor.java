/* Generated by JTB 1.4.7 */
package poseParser.visitor;

import poseParser.syntaxtree.*;
import java.util.*;

public class DepthFirstRetVisitor<R> implements IRetVisitor<R> {


  public R visit(final NodeChoice n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    final R nRes = n.choice.accept(this);
    return nRes;
  }

  public R visit(final NodeList n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this);
    }
    return nRes;
  }

  public R visit(final NodeListOptional n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this);
        }
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeOptional n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      final R nRes = n.node.accept(this);
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeSequence n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this);
    }
    return nRes;
  }

  public R visit(final NodeTCF n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final NodeToken n) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final Pose n) {
    R nRes = null;
    // f0 -> "Pose"
    n.f0.accept(this);
    // f1 -> PoseName()
    n.f1.accept(this);
    // f2 -> PoseDef()
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final PoseDef n) {
    R nRes = null;
    // f0 -> <LPAR>
    n.f0.accept(this);
    // f1 -> ( #0 BoneName() #1 BoneDef() )+
    n.f1.accept(this);
    // f2 -> <RPAR>
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final BoneName n) {
    R nRes = null;
    // f0 -> ( %00 "HEAD:"
    // .. .. | %01 "CHEST:"
    // .. .. | %02 "R SHOULDER:"
    // .. .. | %03 "L SHOULDER:"
    // .. .. | %04 "UPPER R ARM:"
    // .. .. | %05 "LOWER R ARM:"
    // .. .. | %06 "UPPER L ARM:"
    // .. .. | %07 "LOWER L ARM:"
    // .. .. | %08 "R HIP:"
    // .. .. | %09 "L HIP:"
    // .. .. | %10 "UPPER R LEG:"
    // .. .. | %11 "LOWER R LEG:"
    // .. .. | %12 "UPPER L LEG:"
    // .. .. | %13 "LOWER L LEG:" )
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final BoneDef n) {
    R nRes = null;
    // f0 -> Position()
    n.f0.accept(this);
    // f1 -> ","
    n.f1.accept(this);
    // f2 -> Position()
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final Position n) {
    R nRes = null;
    // f0 -> "("
    n.f0.accept(this);
    // f1 -> <FLOAT>
    n.f1.accept(this);
    // f2 -> ","
    n.f2.accept(this);
    // f3 -> <FLOAT>
    n.f3.accept(this);
    // f4 -> ","
    n.f4.accept(this);
    // f5 -> <FLOAT>
    n.f5.accept(this);
    // f6 -> ")"
    n.f6.accept(this);
    return nRes;
  }

  public R visit(final PoseName n) {
    R nRes = null;
    // f0 -> ( <STRING> )+
    n.f0.accept(this);
    return nRes;
  }

}
